{
  "name": "tool-bar-ioton",
  "main": "./lib/tool-bar-ioton",
  "version": "0.5.0",
  "description": "Adds an toolbar with ioton platform integration and commonly used actions",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/iotontech/tool-bar-ioton"
  },
  "license": "MIT",
  "engines": {
    "atom": ">0.50.0"
  },
  "keywords": [
    "toolbar",
    "tool-bar",
    "ioton"
  ],
  "dependencies": {},
  "packageDependencies": {
    "tool-bar": "0.1.9",
    "ioton": "0.6.1"
  },
  "consumedServices": {
    "tool-bar": {
      "versions": {
        "^0.1.0": "consumeToolBar"
      }
    }
  },
  "readme": "# Toolbar Ioton - a tool-bar plugin\n\n## Description\n\nA tool-bar plugin that adds a toolbar with ioton platform integration and commonly used actions.\n\n![screenshot](https://drive.google.com/file/d/0BxaWkFN1F24iTEFUVWNVYzF3TkU/view?usp=sharing)\n\nAvailable toolbar buttons:\n\n* __create new ioton project__\n* __build an ioton project__\n* __upload to the ioton board__\n* __clean an ioton project__\n* __open an serial monitor__\n* -\n* __split screen horizontally__\n* __split screen vertically__\n* -\n* __toggle fullscreen__\n* __toggle tree-view__\n* -\n* __settings__\n\n__Note__: The toolbar buttons that require other packages will only appear if you have those packages installed\n\n## Installation\n\nFirst you have to install the `tool-bar` nad `ioton` package which are required:\n\n```bash\napm install tool-bar\napm install ioton\n```\n\nThen you install the `tool-bar-ioton` package:\n\n```bash\napm install tool-bar-ioton\n```\n\n## Custom entries\n\nIt's also possbile to add your own desired buttons to the tool bar. To utilize this feature you have to go to the settings of tool-bar-almighty and enter a path relative to your `.atom` directory that contains the entries you want to add. They will be added below the default entries.\n\nThe file must be a javascript module that exports an Array of entries.\n\n### Format\n\nThe format is the same as [tool-bar's](https://github.com/suda/tool-bar#example) with 2 extra properties. The first one is `type` which indicates whether the entry is a `button` or a `spacer` while the second one is `dependency` which indicates whether a button's package is not installed by default in Atom and should only be displayed if it's package is installed.\nThe `lib/entries.coffee` is another example on how to format your entries.\n\n### Example\n\n* The file's location `~/.atom/custom_entries.js`\n* The tool-bar-almighty setting's value must match the filename mentioned above `custom_entries.js`\n* The content of the file should look like the following:\n\n```js\nmodule.exports = [\n  {\n    type: 'button',\n    tooltip: 'Open File',\n    callback: 'application:open-file',\n    icon: 'document-text',\n    iconset: 'ion'\n  },\n  {\n    type: 'button',\n    tooltip: 'Open Folder',\n    callback: 'application:open-folder',\n    icon: 'folder',\n    iconset: 'ion'\n  },\n  {\n    type: 'button',\n    tooltip: 'Merge Conflicts',\n    dependency: 'merge-conflicts',\n    callback: 'merge-conflicts:detect',\n    icon: 'code-fork',\n    iconset: 'fa'\n  }\n]\n```\n\n## License\n\nThe MIT License\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/varemenos/atom-toolbar-ioton/issues"
  },
  "homepage": "https://github.com/iotontech/atom-toolbar-ioton#readme",
  "_id": "tool-bar-ioton@0.5.0",
  "_shasum": "d32e8522a015f67e74dd133e617cc90bab4bd7e0",
  "_resolved": "file:../d-115111-21511-1ofxegt/package.tgz",
  "_from": "../d-115111-21511-1ofxegt/package.tgz",
  "_atomModuleCache": {
    "version": 1,
    "dependencies": [],
    "extensions": {
      ".coffee": [
        "lib/entries.coffee",
        "lib/tool-bar-ioton.coffee",
        "lib/utils.coffee"
      ],
      ".json": [
        "package.json"
      ]
    },
    "folders": []
  }
}
